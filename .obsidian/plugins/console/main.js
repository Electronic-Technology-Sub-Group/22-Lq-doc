/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CodePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var CodePlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerMarkdownCodeBlockProcessor("console", (source, el, ctx) => {
      const lines = source.split("\n");
      const pre = el.createEl("pre", { cls: "language-console" });
      for (const line of lines) {
        const m = line.match(/^\s*([>#%\$])\s*(.+)$/);
        if (m != null) {
          const div = pre.createEl("div");
          div.createEl("span", {
            text: m[1],
            cls: "console-prompt" + (m[1] === "#" ? " console-prompt-root" : "")
          });
          div.createEl("span", { text: m[2], cls: "console-command" });
        } else {
          pre.createEl("div", { text: line, cls: "console-output" });
        }
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLypcbiAqIENvcHlyaWdodCAoYykgRGFuaWVsIEVsbGVybWFublxuICovXG5cbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb2RlUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgYXN5bmMgb25sb2FkKCkge1xuICAgIHRoaXMucmVnaXN0ZXJNYXJrZG93bkNvZGVCbG9ja1Byb2Nlc3NvcihcImNvbnNvbGVcIiwgKHNvdXJjZSwgZWwsIGN0eCkgPT4ge1xuICAgICAgY29uc3QgbGluZXMgPSBzb3VyY2Uuc3BsaXQoXCJcXG5cIik7XG5cbiAgICAgIGNvbnN0IHByZSA9IGVsLmNyZWF0ZUVsKFwicHJlXCIsIHsgY2xzOiBcImxhbmd1YWdlLWNvbnNvbGVcIiB9KTtcbiAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xuICAgICAgICBjb25zdCBtID0gbGluZS5tYXRjaCgvXlxccyooWz4jJVxcJF0pXFxzKiguKykkLyk7XG4gICAgICAgIGlmIChtICE9IG51bGwpIHtcbiAgICAgICAgICBjb25zdCBkaXYgPSBwcmUuY3JlYXRlRWwoXCJkaXZcIik7XG4gICAgICAgICAgZGl2LmNyZWF0ZUVsKFxuICAgICAgICAgICAgXCJzcGFuXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRleHQ6IG1bMV0sXG4gICAgICAgICAgICAgIGNsczogXCJjb25zb2xlLXByb21wdFwiICtcbiAgICAgICAgICAgICAgICAobVsxXSA9PT0gXCIjXCIgPyBcIiBjb25zb2xlLXByb21wdC1yb290XCIgOiBcIlwiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgICAgZGl2LmNyZWF0ZUVsKFwic3BhblwiLCB7IHRleHQ6IG1bMl0sIGNsczogXCJjb25zb2xlLWNvbW1hbmRcIiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmUuY3JlYXRlRWwoXCJkaXZcIiwgeyB0ZXh0OiBsaW5lLCBjbHM6IFwiY29uc29sZS1vdXRwdXRcIiB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBSUEsc0JBQXVCO0FBRXZCLElBQXFCLGFBQXJCLGNBQXdDLHVCQUFPO0FBQUEsRUFDN0MsTUFBTSxTQUFTO0FBQ2IsU0FBSyxtQ0FBbUMsV0FBVyxDQUFDLFFBQVEsSUFBSSxRQUFRO0FBQ3RFLFlBQU0sUUFBUSxPQUFPLE1BQU0sSUFBSTtBQUUvQixZQUFNLE1BQU0sR0FBRyxTQUFTLE9BQU8sRUFBRSxLQUFLLG1CQUFtQixDQUFDO0FBQzFELGlCQUFXLFFBQVEsT0FBTztBQUN4QixjQUFNLElBQUksS0FBSyxNQUFNLHVCQUF1QjtBQUM1QyxZQUFJLEtBQUssTUFBTTtBQUNiLGdCQUFNLE1BQU0sSUFBSSxTQUFTLEtBQUs7QUFDOUIsY0FBSSxTQUNGLFFBQ0E7QUFBQSxZQUNFLE1BQU0sRUFBRTtBQUFBLFlBQ1IsS0FBSyxtQkFDRixHQUFFLE9BQU8sTUFBTSx5QkFBeUI7QUFBQSxVQUM3QyxDQUNGO0FBQ0EsY0FBSSxTQUFTLFFBQVEsRUFBRSxNQUFNLEVBQUUsSUFBSSxLQUFLLGtCQUFrQixDQUFDO0FBQUEsUUFDN0QsT0FBTztBQUNMLGNBQUksU0FBUyxPQUFPLEVBQUUsTUFBTSxNQUFNLEtBQUssaUJBQWlCLENBQUM7QUFBQSxRQUMzRDtBQUFBLE1BQ0Y7QUFBQSxJQUNGLENBQUM7QUFBQSxFQUNIO0FBQ0Y7IiwKICAibmFtZXMiOiBbXQp9Cg==
